#ifndef H_DEFINED_CONSTANTS
#define H_DEFINED_CONSTANTS

/*
// A collection of basic mathematical constants, accurate to 40 decimal digits.
// C/C++ floating-point type is long double.

// Written by .\makeConstants.cpp Thu May  5 18:40:10 2005
// Version 2.0, using Victor Shoup's NTL version 5.4 (www.shoup.net/ntl)

// Copyright Paul A. Bristow 1998-2005.
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt
// or copy at http://www.boost.org/LICENSE_1_0.txt)

// From www.hetp.u-net.com/public/math_constants.zip
// For documentation and sources see constants.htm
// Queries and corrections to pbristow@hetp.u-net.com

// The objective is to achieve the full accuracy possible
// with IEC559/IEEE745 floating-point hardware and C++ language.
// This has no extra cost to the user, but reduces irritating effects
// caused by the inevitable limitations of floating point calculations.
// At least these manifest as spurious least significant digits;
// at worst algorithms that fail because comparisons differ.
// 40 decimal digits ensures no loss of accuracy even for 128-bit floating point.
*/

#define M_ZERO 0.L  /* zero */
#define M_ONE 1.L  /* unity */
#define M_TWO 2.L  /* two */
#define M_THREE 3.L  /* three */
#define M_FOUR 4.L  /* four */
#define M_FIVE 5.L  /* five */
#define M_SIX 6.L  /* six */
#define M_SEVEN 7.L  /* seven */
#define M_TEN 10.L  /* ten */
#define M_THIRD 0.3333333333333333333333333333333333333333L  /* 1/3 */
#define M_TWOTHIRDS 0.6666666666666666666666666666666666666667L  /* 2/3 */
#define M_THREEQUARTERS 0.75L  /* 3/4 */
#define M_SQRTTWO 1.41421356237309504880168872420969807857L  /* sqrt(2) */
#define M_SQRTTHREE 1.732050807568877293527446341505872366943L  /* sqrt(3) */
#define M_SQRTFIVE 2.236067977499789696409173668731276235441L  /* sqrt(5) */
#define M_SQRTTEN 3.16227766016837933199889354443271853372L  /* sqrt(10) */
#define M_SQRT32 5.656854249492380195206754896838792314279L  /* sqrt(10) */
#define M_ONEDIVSQRT2 0.7071067811865475244008443621048490392848L  /* 1/sqrt(2) */
#define M_HALFSQRT2 0.7071067811865475244008443621048490392848L  /* sqrt(2)/2 */
#define M_TWOPOWTHREEDIVTWO 2.828427124746190097603377448419396157139L  /* 2^(3/2) */
#define M_TWOPOWMINUSTHREEDIVTWO 0.3535533905932737622004221810524245196424L  /* 2^(-3/2) */
#define M_CUBEROOTTWO 1.25992104989487316476721060727822835057L  /* 2^1/3 */
#define M_ONEDIVCUBEROOTTWO 0.7937005259840997373758528196361541301957L  /* 1/(2^1/3) */
#define M_CUBEROOTTHREE 1.442249570307408382321638310780109588392L  /* 3^1/3 */
#define M_CUBEROOTFOUR 1.587401051968199474751705639272308260391L  /* 4^1/3 */
#define M_ONEDIVCUBEROOTFOUR 0.6299605249474365823836053036391141752851L  /* 1/(4^1/3) */
#define M_CUBEROOTTEN 2.154434690031883721759293566519350495259L  /* 10^1/3 */
#define M_FOURTHROOTTWO 1.189207115002721066717499970560475915293L  /* 2^1/4 */
#define M_LOGTWO 0.6931471805599453094172321214581765680755L  /* ln(2) */
#define M_LOGLOGTWO -0.3665129205816643270124391582326694694543L  /* ln(ln(2)) */
#define M_LOGTWODIVTWO 0.3465735902799726547086160607290882840378L  /* ln(2) / 2 */
#define M_LOGTHREE 1.098612288668109691395245236922525704647L  /* ln(3) */
#define M_LOGFOUR 1.386294361119890618834464242916353136151L  /* ln(4) */
#define M_LOGFIVE 1.609437912434100374600759333226187639526L  /* ln(5) */
#define M_LOGSIX 1.791759469228055000812477358380702272723L  /* ln(6) */
#define M_LOGSEVEN 1.945910149055313305105352743443179729637L  /* ln(7) */
#define M_LOGTEN 2.302585092994045684017991454684364207601L  /* ln(10) */
#define M_ONEDIVLOGTEN 0.4342944819032518276511289189166050822944L  /* 1 / ln(10) */
#define M_ONEDIVLOGTWO 1.442695040888963407359924681001892137427L  /* 1 / ln(2) */
#define M_LOG10TWO 0.3010299956639811952137388947244930267682L  /* log10(2) */
#define M_PI 3.141592653589793238462643383279502884197L  /* Archimedes constant pi */
#define M_HALFPI 1.570796326794896619231321691639751442099L  /* pi / 2 */
#define M_QUARTERPI 0.7853981633974483096156608458198757210493L  /* pi / 4 */
#define M_THIRDPI 1.047197551196597746154214461093167628066L  /* pi / 3 */
#define M_SIXTHPI 0.5235987755982988730771072305465838140329L  /* pi / 6 */
#define M_TWOPI 6.283185307179586476925286766559005768394L  /* 2 * pi */
#define M_TWOTHIRDSPI 2.094395102393195492308428922186335256131L  /* 2/3 * pi */
#define M_THREEPI 9.424777960769379715387930149838508652592L  /* 3 * pi */
#define M_THREEQUARTERSPI 2.356194490192344928846982537459627163148L  /* pi * 3/4 */
#define M_FOURTHIRDSPI 4.188790204786390984616857844372670512263L  /* pi * 4/3 */
#define M_ONEDIVPI 0.3183098861837906715377675267450287240689L  /* 1 / pi */
#define M_TWODIVPI 0.6366197723675813430755350534900574481378L  /* 2 / pi */
#define M_ONEDIVTWOPI 0.1591549430918953357688837633725143620345L  /* 1 / (2 * pi) */
#define M_SQRTPI 1.772453850905516027298167483341145182798L  /* sqrt(pi) */
#define M_SQRTQUARTERPI 0.8862269254527580136490837416705725913988L  /* sqrt(pi / 4) */
#define M_SQRTHALFPI 1.253314137315500251207882642405522626503L  /* sqrt(pi / 2) */
#define M_SQRTTWOPI 2.506628274631000502415765284811045253007L  /* sqrt(2 * pi) */
#define M_SQRTTWODIVPI 0.7978845608028653558798921198687637369517L  /* sqrt(2 / pi) */
#define M_ONEDIVSQRTPI 0.5641895835477562869480794515607725858441L  /* 1 / sqrt(pi) */
#define M_ONEDIVSQRTTWOPI 0.3989422804014326779399460599343818684759L  /* 1 / sqrt(2 * pi) */
#define M_SQRTONEDIVPI 0.5641895835477562869480794515607725858441L  /* sqrt(1 / pi) */
#define M_PISQR 9.869604401089358618834490999876151135314L  /* pi^2 */
#define M_ONEDIVPISQR 0.1013211836423377714438794632097276389044L  /* 1 / pi^2 */
#define M_PICUBED 31.00627668029982017547631506710139520223L  /* pi^3 */
#define M_CUBEROOTPI 1.464591887561523263020142527263790391739L  /* pi^1/3 */
#define M_ONEDIVCUBEROOTPI 0.6827840632552956814670208331581645981084L  /* 1 / pi^1/3 */
#define M_LOGSQRTPI 0.5723649429247000870717136756765293558236L  /* ln(sqrt(pi)) */
#define M_LOGSQRTTWOPI 0.9189385332046727417803297364056176398614L  /* ln(sqrt(2 * pi)) */
#define M_LOGSQRTHALFPI 0.2257913526447274323630976149474410717859L  /* ln(sqrt(pi / 2)) */
#define M_LOGPI 1.144729885849400174143427351353058711647L  /* ln(pi) */
#define M_LOGTWOPI 1.837877066409345483560659472811235279723L  /* ln(2 * pi) */
#define M_PIPOWPI 36.46215960720791177099082602269212366637L  /* pi ^ pi */
#define M_E 2.718281828459045235360287471352662497757L  /* e */
#define M_TWOE 5.436563656918090470720574942705324995514L  /* 2 * e */
#define M_HALFE 1.359140914229522617680143735676331248879L  /* e / 2 */
#define M_PIPOWE 22.45915771836104547342715220454373502759L  /* pi ^ e */
#define M_ONEDIVE 0.3678794411714423215955237701614608674458L  /* 1/e */
#define M_EPOWE 15.15426224147926418976043027262991190553L  /* e^e */
#define M_SQRTE 1.648721270700128146848650787814163571654L  /* sqrt(e) */
#define M_ONEDIVSQRTE 0.6065306597126334236037995349911804534419L  /* 1/sqrt(e) */
#define M_ESQR 7.38905609893065022723042746057500781318L  /* e^2 */
#define M_ONEDIVESQR 0.1353352832366126918939994949724844034076L  /* 1 / e^2 */
#define M_ECUBED 20.08553692318766774092852965458171789699L  /* e^3 */
#define M_LOG10E 0.4342944819032518276511289189166050822944L  /* log10(e) */
#define M_ONEDIVLOG10 2.302585092994045684017991454684364207601L  /* 1/ln(10) */
#define M_LOGE 1.L  /* log(e) */
#define M_EPOWPI 23.14069263277926900572908636794854738027L  /* e^pi */
#define M_EPOWMINUSPI 0.04321391826377224977441773717172801127573L  /* e^-pi */
#define M_EPOWHALFPI 4.81047738096535165547303566670383312639L  /* e^(pi/2) */
#define M_EPOWQUARTERPI 2.193280050738015456559769659278738223462L  /* e^(pi/4) */
#define M_EPOWMINUSHALFPI 0.2078795763507619085469556198349787700339L  /* e^(-pi/2) */
#define M_EPOWMINUSE 0.06598803584531253707679018759684642493858L  /* e^-e */
#define M_DEGREE 0.01745329251994329576923690768488612713443L  /* radians = pi / 180. */
#define M_RADIAN 57.29577951308232087679815481410517033241L  /* degrees = 180 / pi */
#define M_SINONE 0.8414709848078965048756572286947630345821L  /* sin(1) */
#define M_COSONE 0.5403023058681397650104827334871515631676L  /* cos(1) */
#define M_SINHONE 1.175201193643801378385660427738912403584L  /* sinh(1) */
#define M_COSHONE 1.543080634815243712409937870688736438751L  /* cosh(1) */
#define M_PHI 1.61803398874989484820458683436563811772L  /* (1 + sqrt(5)) /2; */
#define M_LOGPHI 0.4812118250596034474977589134243684231352L  /* ln(phi) */
#define M_ONEDIVLNPHI 2.078086921235027537601322606117795767742L  /* 1/ln(phi) */
#define M_GAMMA 0.5772156649015328606065120900824024310422L  /* Euler's gamma constant */
#define M_ONEDIVGAMMA 1.732454714600633473583025315860829681156L  /* 1/gamma */
#define M_GAMMASQR 0.3331779238077186743183761363552442266594L  /* gamma^2 */
#define M_GAMMACUBED 0.1923155168211845896631923744196359071217L  /* gamma^3 */
#define M_EPOWGAMMA 1.78107241799019798523650410310717954917L  /* e^gamma */
#define M_EPOWMINUSGAMMA 0.5614594835668851698241432147908807867657L  /* e^-gamma */
#define M_LOGGAMMA -0.5495393129816448223376617688029077883307L  /* ln(gamma) */
#define M_GAMMASIXTH 5.566316001780235204250096895207726111399L  /* gamma(1/6) */
#define M_LOGGAMMASIXTH 1.716733435078240460527846309587930757279L  /* ln(gamma(1/6)) */
#define M_GAMMAQUARTER 3.625609908221908311930685155867672002995L  /* gamma(1/4) */
#define M_LOGGAMMAQUARTER 1.288022524698077457370610440219717295925L  /* ln(gamma(1/4)) */
#define M_GAMMATHIRD 2.678938534707747633655692940974677644129L  /* gamma(1/3) */
#define M_LOGGAMMATHIRD 0.9854206469277670691871740369779613917356L  /* ln(gamma(1/3)) */
#define M_GAMMAHALF 1.772453850905516027298167483341145182798L  /* gamma(1/2) == sqrt(pi) */
#define M_LOGGAMMAHALF 0.5723649429247000870717136756765293558236L  /* ln(gamma(1/2)) */
#define M_GAMMATWOTHIRDS 1.354117939426400416945288028154513785519L  /* gamma(2/3) */
#define M_LOGGAMMATWOTHIRDS 0.3031502751475235686758628173720110356635L  /* ln(gamma(2/3)) */
#define M_GAMMATHREEQUARTERS 1.225416702465177645129098303362890526851L  /* gamma(3/4) */
#define M_LOGGAMMATHREEQUARTERS 0.2032809514312953714814329718624296997597L  /* ln(gamma(3/4)) */
#define M_GAMMAFIVESIXTHS 1.128787029908125961260901090258842013327L  /* gamma(5/6) */
#define M_LOGGAMMAFIVESIXTHS 0.1211436313311050230328131632233045224434L  /* ln(gamma(5/6)) */
#define M_GAMMAONE 1.L  /* by definition. */
#define M_GAMMATWO 1.L  /* by definition. */
#define M_GAMMATHREE 2.L  /* factorial(2) == 2! */
#define M_LOGGAMMATHREE 0.6931471805599453094172321214581765680755L  /* ln(gamma(3)) */
#define M_GAMMAFOUR 6.L  /* factorial(3) == 3! */
#define M_LOGGAMMAFOUR 1.791759469228055000812477358380702272723L  /* ln(gamma(4)) */
#define M_GAMMAFIVE 24.L  /* factorial(4) == 4! */
#define M_LOGGAMMAFIVE 3.178053830347945619646941601297055408874L  /* ln(gamma(5)) */
#define M_GAMMASIX 120.L  /* factorial(5) */
#define M_LOGGAMMASIX 4.7874917427820459942477009345232430484L  /* ln(gamma(6)) */
#define M_LOGGAMMAMIN 0.3795537188395179971250638364384648368782L  /* log(gamma(1.46))  minimum value is 0.88... */
#define M_GAMMAMIN 1.461632144968362341262659542325721328468L  /* gamma(1.46) has the minimum value of 0.88... */
#define M_GAMMAMINVALUE 0.885603194410888700278815900582588733208L  /* gamma(1.46) minimum value. */
#define M_CF10 1.030640834100712935881776094116936840925L  /* Continued fraction (base 10) */
#define M_ZETATWO 1.644934066848226436472415166646025189219L  /* Zeta(2) or Pi^(2/6) = sum(1/n**2, n=1..infinity */
#define M_ZETATHREE 1.202056903159594285399738161511449990765L  /* zeta(3) */

#endif H_DEFINED_CONSTANTS
/* End of define_constants.h */
